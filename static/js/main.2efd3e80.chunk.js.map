{"version":3,"sources":["logo.svg","actions/types.js","actions/postActions.js","components/Posts.js","reducers/loadingReducer.js","reducers/postsReducer.js","reducers/newPostReducer.js","reducers/errorReducer.js","reducers/index.js","lib/api.js","sagas/postsSaga.js","sagas/index.js","store.js","components/PostForm.js","components/PostFormContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","POSTS","FETCH","FETCH_SUCCESS","FETCH_FAIL","NEW_POST","CREATE","CREATE_SUCCESS","CREATE_FAIL","setPosts","posts","type","setError","error","setNewPost","newPost","setNewPostError","Posts","this","props","fetchPosts","prevProps","console","log","newestPost","unshift","_this$props","isLoading","postItems","map","post","index","react_default","a","createElement","key","id","title","body","Object","keys","JSON","stringify","Component","connect","_ref","dispatch","loadingReducer","state","arguments","length","undefined","postsReducer","action","concat","toConsumableArray","newPostReducer","alert","objectSpread","errorReducer","rootReducer","combineReducers","form","formReducer","URL","lib_api","_callee","response","rawData","regenerator_default","wrap","_context","prev","next","fetch","sent","json","status","Error","errors","abrupt","stop","fetchNewPost","_callee2","postData","_context2","method","headers","content-type","handleFetchPosts","handleNewPostCreation","watchPostsFetch","getValues","contact","values","call","api","put","t0","toString","_marked","select","_marked2","_context3","takeEvery","takeLatest","_marked3","rootSaga","all","postsSaga","sagas_marked","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","run","PostForm","handleSubmit","onSubmit","htmlFor","redux_form_es","name","component","reduxForm","PostFormContainer","submit","_this","createNewPost","components_PostForm","App","es","store","className","src","logo","alt","components_PostFormContainer","components_Posts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2efd3e80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const POSTS = {\n  FETCH: \"POSTS_FETCH\",\n  FETCH_SUCCESS: \"POSTS_FETCH_SUCCESS\",\n  FETCH_FAIL: \"POSTS_FETCH_FAIL\"\n}\n\nconst NEW_POST = {\n  CREATE: \"NEW_POST_CREATE\",\n  CREATE_SUCCESS: \"NEW_POST_CREATE_SUCCESS\",\n  CREATE_FAIL: \"NEW_POST_CREATE_FAIL\"\n}\n\nexport { POSTS, NEW_POST };\n","import { POSTS, NEW_POST } from \"./types\";\n\nconst fetchPosts = () => ({\n  type: POSTS.FETCH\n});\n\nconst setPosts = posts => ({\n  type: POSTS.FETCH_SUCCESS,\n  posts\n});\n\nconst setError = error => ({\n  type: POSTS.FETCH_FAIL,\n  error\n});\n\nconst createNewPost = () => ({\n  type: NEW_POST.CREATE\n})\n\nconst setNewPost = newPost => ({\n  type: NEW_POST.CREATE_SUCCESS,\n  newPost: newPost\n});\n\nconst setNewPostError = error => ({\n  type: NEW_POST.CREATE_FAIL,\n  error\n});\n\nexport {\n  fetchPosts,\n  setPosts,\n  setError,\n  createNewPost,\n  setNewPost,\n  setNewPostError\n};\n\n// const newPost = () => ({\n//   type: NEW_POST\n// })\n","import React, { Component } from \"react\";\n// Conecta con el store\nimport { connect } from \"react-redux\";\n// Trae la acción\nimport { fetchPosts } from \"../actions/postActions\";\n\nclass Posts extends Component {\n  componentDidMount() {\n    // Aquí se llama a la acción que se esta pasando al componente a través de props\n    this.props.fetchPosts();\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(prevProps);\n    \n    // TO DO: Corregir problema que hace que el post no aparezca hasta el segundo click\n    if (prevProps.newPost !== this.props.newPost) {\n      let newestPost = this.props.newPost.newPost;\n      this.props.posts.unshift(newestPost);\n    }\n    \n  }\n\n  render() {\n    const { isLoading, posts, newPost, error } = this.props;\n\n    // console.log(Object.keys(newPost).length);\n\n    // const newPostItem = (\n    //   <div key={\"post\" + newPost.id}>\n    //     <h3>{newPost.title}</h3>\n    //     <p>{newPost.body}</p>\n    //   </div>\n    // );\n\n    // TO DO: Arreglar problema de post con la misma key\n    const postItems = posts.map((post,index) => (\n      <div key={\"post\" + post.id + index}>\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    ));\n\n    return (\n      <div>\n        <h1>Posts</h1>\n        {Object.keys(newPost) > 0 ? (\n          <div key={newPost.id}>\n            <h3>{newPost.title}</h3>\n            <p>{newPost.body}</p>\n          </div>\n        ) : null}\n        {postItems}\n        {error && <div>{JSON.stringify(error)}</div>}\n        {isLoading && <p>Cargando...</p>}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ isLoading, posts, newPost, error }) => ({\n  isLoading,\n  posts,\n  newPost,\n  error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchPosts: () => dispatch(fetchPosts())\n});\n// fetchPosts llama al fetch request\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Posts);\n","import { POSTS } from \"../actions/types\";\n\nconst loadingReducer = (state = false, action) => {\n  switch(action.type){\n    case POSTS.FETCH:\n      return true;\n    case POSTS.FETCH_SUCCESS:\n      return false;\n    case POSTS.FETCH_FAIL:\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;","import { POSTS } from \"../actions/types\";\n\nconst postsReducer = (state = [], action) => {\n  switch (action.type) {\n    case POSTS.FETCH_SUCCESS:\n      return [...state, ...action.posts]; \n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;","import { NEW_POST } from \"../actions/types\";\n\nconst newPostReducer = (state = {}, action) => {\n  switch (action.type) {\n    case NEW_POST.CREATE_SUCCESS:\n      alert(\"Tu post a sido agregado\");\n      return {...state, newPost: action.newPost}; \n    default:\n      return state;\n  }\n};\n\nexport default newPostReducer;","import { POSTS, NEW_POST } from \"../actions/types\";\n\nconst errorReducer = (state = null, action) => {\n  switch(action.type) {\n    case POSTS.FETCH_FAIL:\n    case NEW_POST.CREATE_FAIL:\n      return action.error;\n    case POSTS.FETCH:\n    case POSTS.FETCH_SUCCESS:\n    case NEW_POST.CREATE:\n    case NEW_POST.CREATE_SUCCESS:\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default errorReducer;","import { combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport loadingReducer from \"./loadingReducer\";\nimport postsReducer from \"./postsReducer\";\nimport newPostReducer from \"./newPostReducer\";\nimport errorReducer from \"./errorReducer\";\n// import postReducer from \"./betaPostReducer\";\n\nconst rootReducer = combineReducers({\n  isLoading: loadingReducer,\n  posts: postsReducer,\n  newPost: newPostReducer,\n  error: errorReducer,\n  form: formReducer\n})\n\nexport default rootReducer;","const URL = \"https://jsonplaceholder.typicode.com/posts\";\n\nclass api {\n  fetchPosts = async () => {\n    const response = await fetch(URL);\n    const rawData = await response.json();\n    if (response.status >= 400) {\n      throw new Error(rawData.errors);\n    }\n    return rawData;\n  };\n\n  fetchNewPost = async postData => {\n    const response = await fetch(URL, {\n      // Especifica el metodo\n      method: \"POST\",\n      // Dice que tipo de contenido sera, en este caso JSON\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      // Data que queremos enviar\n      body: JSON.stringify(postData)\n    });\n    const rawData = await response.json();\n    // console.log(rawData);\n    if (response.status >= 400) {\n      throw new Error(rawData.errors);\n    }\n    return rawData;\n  };\n}\n\nexport default new api();\n","import { takeEvery, call, put, select, takeLatest } from \"redux-saga/effects\"; // Objetos con significado para saga\nimport { POSTS, NEW_POST } from \"../actions/types\";\nimport api from \"../lib/api\";\nimport { setPosts, setError, setNewPost, setNewPostError } from \"../actions/postActions\";\n\nexport const getValues = state => state.form.contact.values;\n\nfunction* handleFetchPosts() {\n  try {\n    const posts = yield call(api.fetchPosts);\n    yield put(setPosts(posts));\n  } catch (error) {\n    // dispatch error\n    yield put(setError(error.toString()));\n  }\n}\n\nfunction* handleNewPostCreation() {\n  try{\n    const values = yield select(getValues);\n    // console.log(values);\n    const newPost = yield call(api.fetchNewPost, values);\n    // console.log(newPost);\n    yield put(setNewPost(newPost));\n  } catch (error) {\n    yield put(setNewPostError(error.toString()));\n  }\n}\n\nexport default function* watchPostsFetch(){\n  yield takeEvery(POSTS.FETCH, handleFetchPosts);\n  yield takeLatest(NEW_POST.CREATE, handleNewPostCreation);\n}","import { all } from \"redux-saga/effects\";\n\nimport postsSaga from \"./postsSaga\";\n\nexport default function* rootSaga() {\n  yield all([postsSaga()]);\n}","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducer from \"./reducers\";\nimport rootSaga from \"./sagas\";\n\nconst initialState = {};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)) \n);\n\nsagaMiddleware.run(rootSaga);","import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nlet PostForm = props => {\n  const { handleSubmit } = props;\n  return (\n    <div>\n      <h1>Hacer un nuevo post</h1>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"firstName\">Título:</label>\n          <br />\n          <Field name=\"title\" component=\"input\" type=\"text\" />\n        </div>\n        <br />\n        <div>\n          <label htmlFor=\"lastName\">Mensaje:</label>\n          <br />\n          <Field name=\"body\" component=\"textarea\" type=\"text\" />\n        </div>\n        <br />\n        <button type=\"submit\">Publicar</button>\n      </form>\n    </div>\n  );\n};\n\nPostForm = reduxForm({\n  form: \"contact\"\n})(PostForm);\n\nexport default PostForm;\n// import React, { Component } from 'react';\n// import { connect } from \"react-redux\";\n// import { createNewPost } from \"../actions/postActions\";\n\n// class PostForm extends Component {\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       title:\"\",\n//       body:\"\"\n//     };\n//   }\n\n//   onChange = (event) => {\n//     this.setState({ [event.target.name]: event.target.value })\n//   }\n\n//   onSubmit = (event) => {\n//     event.preventDefault();\n//     const post = {\n//       title: this.state.title,\n//       body: this.state.body\n//     }\n\n//     this.props.createNewPost(post);\n//     // fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n//     //   // Especifica el metodo\n//     //   method: \"POST\",\n//     //   // Dice que tipo de contenido sera, en este caso JSON\n//     //   headers: {\n//     //     \"content-type\": \"application/json\"\n//     //   },\n//     //   // Data que queremos enviar\n//     //   body: JSON.stringify(post)\n//     // })\n//     // .then(res => res.json())\n//     // .then(data => console.log(data));\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <h1>Add Post</h1>\n//         <form onSubmit={this.onSubmit}>\n//           <div>\n//             <label>Title:</label>\n//             <br/>\n//             <input type=\"text\" name=\"title\" onChange={this.onChange} value={this.state.title} />\n//           </div>\n//           <br/>\n//           <div>\n//             <label>Body:</label><br/>\n//             <textarea name=\"body\" onChange={this.onChange} value={this.state.body}/>\n//           </div>\n//           <br/>\n//           <button type=\"submit\">Submit</button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = dispatch => ({\n//   createNewPost: () => dispatch(createNewPost())\n// })\n\n// export default connect(null, mapDispatchToProps)(PostForm);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\"; \n\nimport PostForm from \"./PostForm\";\nimport {createNewPost} from \"../actions/postActions\";\n\nclass PostFormContainer extends Component {\n  submit = values => {\n    this.props.createNewPost(values);\n  }\n\n  render() {\n    return (\n      <div>\n        <PostForm onSubmit={this.submit} />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  createNewPost: () => dispatch(createNewPost())\n})\n\nexport default connect(null, mapDispatchToProps)(PostFormContainer);\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\n\nimport Posts from \"./components/Posts\";\nimport store from \"./store\";\nimport PostFormContainer from \"./components/PostFormContainer\";\n\nclass App extends Component {\n  render() {\n    // store.dispatch({ type: \"FETCH_POSTS\" });\n    \n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Ejercicio de práctica con React, Redux y Redux-Saga\n            </p>\n          </header>\n          <PostFormContainer />\n          <hr />\n          <Posts />\n        </div>\n      </Provider>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}